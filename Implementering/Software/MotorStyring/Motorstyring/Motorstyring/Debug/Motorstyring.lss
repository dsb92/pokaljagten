
Motorstyring.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000148  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  000008f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000052d  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000158  00000000  00000000  00000e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000399  00000000  00000000  00000ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000074  00000000  00000000  00001390  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000016c  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e4       	ldi	r30, 0x48	; 72
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  8a:	0c 94 a2 00 	jmp	0x144	; 0x144 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <initTimer2>:
void initTimer2( void )
{
	// PWM Phase correct.
	// Set OC2 on compare match when up-counting. Clear OC2 downcounting.
	// Prescaling 256.
	TCCR2 = 0b01110100;
  92:	84 e7       	ldi	r24, 0x74	; 116
  94:	85 bd       	out	0x25, r24	; 37
  96:	08 95       	ret

00000098 <DriveForward1>:
#include <avr/io.h>
#include <util/delay.h>

void DriveForward1( void )
{
	DDRD = 0xFF;
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b10000000;
  9c:	80 e8       	ldi	r24, 0x80	; 128
  9e:	82 bb       	out	0x12, r24	; 18
	OCR2 = 128; // 50 %
  a0:	83 bd       	out	0x23, r24	; 35
}
  a2:	08 95       	ret

000000a4 <DriveForward2>:
	DDRD = 0xFF;
	PORTD = 0b10000000;
	OCR2 = 179; // 30 %
	*/
	
	DDRD |= 0b11000000;
  a4:	81 b3       	in	r24, 0x11	; 17
  a6:	80 6c       	ori	r24, 0xC0	; 192
  a8:	81 bb       	out	0x11, r24	; 17
	PORTD |= 0b10000000; 
  aa:	97 9a       	sbi	0x12, 7	; 18
	
	OCR2 = 179;
  ac:	83 eb       	ldi	r24, 0xB3	; 179
  ae:	83 bd       	out	0x23, r24	; 35
}
  b0:	08 95       	ret

000000b2 <Brake>:
	/*
	DDRD = 0xFF;
	OCR2 = 255; // ((255-255)/255)*100 = 
	*/
	
	DDRD |= 0b11000000;
  b2:	81 b3       	in	r24, 0x11	; 17
  b4:	80 6c       	ori	r24, 0xC0	; 192
  b6:	81 bb       	out	0x11, r24	; 17
	OCR2 = 255;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	83 bd       	out	0x23, r24	; 35
}	
  bc:	08 95       	ret

000000be <Reverse>:
	DDRD = 0xFF;
	PORTD = 0xFF;

	OCR2 = 30; //((255-178)/255)*100 = 30,196
	*/
	DDRD |= 0b11000000;
  be:	81 b3       	in	r24, 0x11	; 17
  c0:	80 6c       	ori	r24, 0xC0	; 192
  c2:	81 bb       	out	0x11, r24	; 17
	PORTD |= 0b11000000;
  c4:	82 b3       	in	r24, 0x12	; 18
  c6:	80 6c       	ori	r24, 0xC0	; 192
  c8:	82 bb       	out	0x12, r24	; 18
	
	OCR2 = 30;
  ca:	8e e1       	ldi	r24, 0x1E	; 30
  cc:	83 bd       	out	0x23, r24	; 35
}
  ce:	08 95       	ret

000000d0 <main>:

int main(void)
{
	initTimer2();
  d0:	0e 94 49 00 	call	0x92	; 0x92 <initTimer2>
	
    while(1)
    {
       DriveForward1(); 
  d4:	0e 94 4c 00 	call	0x98	; 0x98 <DriveForward1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	8f e7       	ldi	r24, 0x7F	; 127
  da:	94 e8       	ldi	r25, 0x84	; 132
  dc:	ae e1       	ldi	r26, 0x1E	; 30
  de:	81 50       	subi	r24, 0x01	; 1
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	a0 40       	sbci	r26, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0xe>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x18>
  e8:	00 00       	nop
	   _delay_us(10000000);
	   DriveForward2();
  ea:	0e 94 52 00 	call	0xa4	; 0xa4 <DriveForward2>
  ee:	8f e7       	ldi	r24, 0x7F	; 127
  f0:	94 e8       	ldi	r25, 0x84	; 132
  f2:	ae e1       	ldi	r26, 0x1E	; 30
  f4:	81 50       	subi	r24, 0x01	; 1
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	a0 40       	sbci	r26, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x24>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x2e>
  fe:	00 00       	nop
	   _delay_us(10000000);
	   Brake();
 100:	0e 94 59 00 	call	0xb2	; 0xb2 <Brake>
 104:	8f e7       	ldi	r24, 0x7F	; 127
 106:	94 e8       	ldi	r25, 0x84	; 132
 108:	ae e1       	ldi	r26, 0x1E	; 30
 10a:	81 50       	subi	r24, 0x01	; 1
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	a0 40       	sbci	r26, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x3a>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x44>
 114:	00 00       	nop
	   _delay_us(10000000);
	   Reverse();
 116:	0e 94 5f 00 	call	0xbe	; 0xbe <Reverse>
 11a:	8f e7       	ldi	r24, 0x7F	; 127
 11c:	94 e8       	ldi	r25, 0x84	; 132
 11e:	ae e1       	ldi	r26, 0x1E	; 30
 120:	81 50       	subi	r24, 0x01	; 1
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	a0 40       	sbci	r26, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0x50>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x5a>
 12a:	00 00       	nop
	   _delay_us(10000000);
	   Brake();
 12c:	0e 94 59 00 	call	0xb2	; 0xb2 <Brake>
 130:	8f e7       	ldi	r24, 0x7F	; 127
 132:	94 e8       	ldi	r25, 0x84	; 132
 134:	ae e1       	ldi	r26, 0x1E	; 30
 136:	81 50       	subi	r24, 0x01	; 1
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	a0 40       	sbci	r26, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0x66>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0x70>
 140:	00 00       	nop
 142:	c8 cf       	rjmp	.-112    	; 0xd4 <main+0x4>

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
